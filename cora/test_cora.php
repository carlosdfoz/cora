<?php
/**
 * Script de diagn√≥stico completo para API Cora
 * Execute este arquivo para diagnosticar problemas de autentica√ß√£o
 */

error_reporting(E_ALL);
ini_set('display_errors', 1);

echo "<!DOCTYPE html>
<html>
<head>
    <title>Diagn√≥stico API Cora</title>
    <meta charset='UTF-8'>
    <style>
        body { font-family: monospace; background: #1a1a1a; color: #0f0; padding: 20px; }
        .section { margin: 20px 0; padding: 15px; border: 1px solid #0f0; }
        .error { color: #f00; }
        .warning { color: #ff0; }
        .success { color: #0f0; }
        .info { color: #0ff; }
        pre { background: #000; padding: 10px; overflow-x: auto; }
        h2 { color: #0ff; border-bottom: 2px solid #0ff; }
    </style>
</head>
<body>
<h1>üîç Diagn√≥stico Completo - API Cora</h1>";

// Configura√ß√µes
$client_id = 'int-6BzCd5SjaNQZIecvRzbHxR';
$cert_path = '/home/traysist/public_html/boletos/certificates/certificate.pem';
$key_path = '/home/traysist/public_html/boletos/certificates/private-key.key';
$base_url = 'https://matls-clients.api.cora.com.br';

// ==================================================
// 1. VERIFICAR CERTIFICADOS
// ==================================================
echo "<div class='section'>";
echo "<h2>1. Verifica√ß√£o de Certificados</h2>";

// Verificar exist√™ncia
if (file_exists($cert_path)) {
    echo "<span class='success'>‚úÖ Certificado encontrado</span><br>";
    
    // Verificar conte√∫do
    $cert_content = file_get_contents($cert_path);
    if (strpos($cert_content, '-----BEGIN CERTIFICATE-----') !== false) {
        echo "<span class='success'>‚úÖ Certificado tem formato PEM v√°lido</span><br>";
        
        // Verificar validade do certificado
        $cert_info = openssl_x509_parse($cert_content);
        if ($cert_info) {
            echo "<span class='info'>üìÖ V√°lido de: " . date('Y-m-d H:i:s', $cert_info['validFrom_time_t']) . "</span><br>";
            echo "<span class='info'>üìÖ V√°lido at√©: " . date('Y-m-d H:i:s', $cert_info['validTo_time_t']) . "</span><br>";
            
            if (time() > $cert_info['validTo_time_t']) {
                echo "<span class='error'>‚ùå CERTIFICADO EXPIRADO!</span><br>";
            } elseif (time() < $cert_info['validFrom_time_t']) {
                echo "<span class='error'>‚ùå CERTIFICADO AINDA N√ÉO √â V√ÅLIDO!</span><br>";
            } else {
                echo "<span class='success'>‚úÖ Certificado dentro da validade</span><br>";
            }
            
            echo "<span class='info'>üìù Subject: " . $cert_info['subject']['CN'] . "</span><br>";
            echo "<span class='info'>üìù Issuer: " . $cert_info['issuer']['CN'] . "</span><br>";
        }
    } else {
        echo "<span class='error'>‚ùå Certificado n√£o tem formato PEM v√°lido</span><br>";
    }
} else {
    echo "<span class='error'>‚ùå Certificado n√£o encontrado em: $cert_path</span><br>";
}

if (file_exists($key_path)) {
    echo "<span class='success'>‚úÖ Chave privada encontrada</span><br>";
    
    $key_content = file_get_contents($key_path);
    if (strpos($key_content, '-----BEGIN') !== false) {
        echo "<span class='success'>‚úÖ Chave privada tem formato PEM v√°lido</span><br>";
    }
} else {
    echo "<span class='error'>‚ùå Chave privada n√£o encontrada em: $key_path</span><br>";
}

// Verificar se certificado e chave correspondem
if (file_exists($cert_path) && file_exists($key_path)) {
    $cert_content = file_get_contents($cert_path);
    $key_content = file_get_contents($key_path);
    
    $cert_resource = openssl_x509_read($cert_content);
    $key_resource = openssl_pkey_get_private($key_content);
    
    if ($cert_resource && $key_resource) {
        if (openssl_x509_check_private_key($cert_resource, $key_resource)) {
            echo "<span class='success'>‚úÖ Certificado e chave privada correspondem</span><br>";
        } else {
            echo "<span class='error'>‚ùå Certificado e chave privada N√ÉO correspondem!</span><br>";
        }
    }
}

echo "</div>";

// ==================================================
// 2. TESTE DE AUTENTICA√á√ÉO - M√âTODO 1 (OAuth2)
// ==================================================
echo "<div class='section'>";
echo "<h2>2. Teste de Autentica√ß√£o OAuth2</h2>";

$ch = curl_init();

$post_data = [
    'grant_type' => 'client_credentials',
    'client_id' => $client_id
];

echo "<span class='info'>üì§ Enviando para: $base_url/token</span><br>";
echo "<span class='info'>üìã Client ID: $client_id</span><br>";
echo "<pre>POST Data: " . print_r($post_data, true) . "</pre>";

curl_setopt_array($ch, [
    CURLOPT_URL => $base_url . '/token',
    CURLOPT_RETURNTRANSFER => true,
    CURLOPT_POST => true,
    CURLOPT_POSTFIELDS => http_build_query($post_data),
    CURLOPT_HTTPHEADER => [
        'Content-Type: application/x-www-form-urlencoded',
        'Accept: application/json'
    ],
    CURLOPT_SSLCERT => $cert_path,
    CURLOPT_SSLKEY => $key_path,
    CURLOPT_SSL_VERIFYPEER => true,
    CURLOPT_SSL_VERIFYHOST => 2,
    CURLOPT_TIMEOUT => 30,
    CURLOPT_VERBOSE => true,
    CURLOPT_STDERR => fopen('php://temp', 'w+'),
]);

$response = curl_exec($ch);
$http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
$curl_error = curl_error($ch);
$curl_info = curl_getinfo($ch);

// Capturar verbose output
rewind($curl_info['stderr'] ?? fopen('php://temp', 'r'));
$verbose = stream_get_contents($curl_info['stderr'] ?? fopen('php://temp', 'r'));

echo "<span class='info'>üì° HTTP Code: $http_code</span><br>";

if ($curl_error) {
    echo "<span class='error'>‚ùå cURL Error: $curl_error</span><br>";
} else {
    if ($http_code == 200) {
        echo "<span class='success'>‚úÖ Autentica√ß√£o bem-sucedida!</span><br>";
        $result = json_decode($response, true);
        if (isset($result['access_token'])) {
            echo "<span class='success'>üîë Token obtido: " . substr($result['access_token'], 0, 20) . "...</span><br>";
            echo "<span class='info'>‚è±Ô∏è Expira em: " . ($result['expires_in'] ?? 'N/A') . " segundos</span><br>";
        }
    } else {
        echo "<span class='error'>‚ùå Falha na autentica√ß√£o</span><br>";
    }
    
    echo "<h3>Resposta:</h3>";
    echo "<pre>";
    $json = json_decode($response, true);
    if ($json) {
        echo json_encode($json, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE);
    } else {
        echo htmlspecialchars($response);
    }
    echo "</pre>";
}

curl_close($ch);
echo "</div>";

// ==================================================
// 3. TESTE ALTERNATIVO - MUTUAL TLS
// ==================================================
echo "<div class='section'>";
echo "<h2>3. Teste com mTLS (Mutual TLS)</h2>";

// Teste alternativo sem OAuth, apenas com certificados
$ch = curl_init();

echo "<span class='info'>üì§ Testando endpoint com mTLS puro...</span><br>";

curl_setopt_array($ch, [
    CURLOPT_URL => $base_url . '/healthcheck', // Endpoint de teste
    CURLOPT_RETURNTRANSFER => true,
    CURLOPT_HTTPHEADER => [
        'Accept: application/json'
    ],
    CURLOPT_SSLCERT => $cert_path,
    CURLOPT_SSLKEY => $key_path,
    CURLOPT_SSL_VERIFYPEER => true,
    CURLOPT_SSL_VERIFYHOST => 2,
    CURLOPT_TIMEOUT => 10,
]);

$response = curl_exec($ch);
$http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
$curl_error = curl_error($ch);

if ($curl_error) {
    echo "<span class='warning'>‚ö†Ô∏è Erro no healthcheck: $curl_error</span><br>";
} else {
    echo "<span class='info'>üì° HTTP Code: $http_code</span><br>";
    if ($http_code == 200 || $http_code == 404) {
        echo "<span class='success'>‚úÖ Conex√£o mTLS estabelecida</span><br>";
    }
}

curl_close($ch);
echo "</div>";

// ==================================================
// 4. VERIFICAR CONFIGURA√á√ÉO DO SISTEMA
// ==================================================
echo "<div class='section'>";
echo "<h2>4. Configura√ß√£o do Sistema</h2>";

// Verificar OpenSSL
$openssl_version = OPENSSL_VERSION_TEXT;
echo "<span class='info'>üîê OpenSSL: $openssl_version</span><br>";

// Verificar cURL
$curl_version = curl_version();
echo "<span class='info'>üåê cURL: " . $curl_version['version'] . "</span><br>";
echo "<span class='info'>üìù SSL: " . $curl_version['ssl_version'] . "</span><br>";

// Verificar suporte a protocolos
$protocols = $curl_version['protocols'];
if (in_array('https', $protocols)) {
    echo "<span class='success'>‚úÖ HTTPS suportado</span><br>";
}

echo "</div>";

// ==================================================
// 5. POSS√çVEIS SOLU√á√ïES
// ==================================================
echo "<div class='section'>";
echo "<h2>5. Diagn√≥stico e Solu√ß√µes</h2>";

if ($http_code == 401) {
    echo "<span class='warning'>‚ö†Ô∏è Erro 401 - Poss√≠veis causas:</span><br>";
    echo "<ul>";
    echo "<li>Client ID incorreto (verifique: <code>$client_id</code>)</li>";
    echo "<li>Certificados expirados ou inv√°lidos</li>";
    echo "<li>Certificados n√£o correspondem ao Client ID</li>";
    echo "<li>Ambiente incorreto (produ√ß√£o vs sandbox)</li>";
    echo "</ul>";
    
    echo "<span class='info'>üí° Recomenda√ß√µes:</span><br>";
    echo "<ol>";
    echo "<li>Confirme o Client ID com a Cora</li>";
    echo "<li>Verifique se os certificados s√£o os corretos para este Client ID</li>";
    echo "<li>Confirme se est√° usando a URL correta (produ√ß√£o: matls-clients.api.cora.com.br)</li>";
    echo "<li>Se necess√°rio, solicite novos certificados √† Cora</li>";
    echo "</ol>";
}

echo "</div>";

// ==================================================
// 6. TESTE COM DIFERENTES CONFIGURA√á√ïES
// ==================================================
echo "<div class='section'>";
echo "<h2>6. Teste com Configura√ß√µes Alternativas</h2>";

// Testar sem verifica√ß√£o SSL (apenas para debug!)
echo "<h3>Teste sem verifica√ß√£o SSL (DEBUG APENAS):</h3>";

$ch = curl_init();
curl_setopt_array($ch, [
    CURLOPT_URL => $base_url . '/token',
    CURLOPT_RETURNTRANSFER => true,
    CURLOPT_POST => true,
    CURLOPT_POSTFIELDS => http_build_query($post_data),
    CURLOPT_HTTPHEADER => [
        'Content-Type: application/x-www-form-urlencoded',
        'Accept: application/json'
    ],
    CURLOPT_SSLCERT => $cert_path,
    CURLOPT_SSLKEY => $key_path,
    CURLOPT_SSL_VERIFYPEER => false, // APENAS PARA DEBUG!
    CURLOPT_SSL_VERIFYHOST => 0,      // APENAS PARA DEBUG!
    CURLOPT_TIMEOUT => 30,
]);

$response = curl_exec($ch);
$http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);

echo "<span class='info'>üì° HTTP Code (sem verifica√ß√£o SSL): $http_code</span><br>";

if ($http_code == 200) {
    echo "<span class='warning'>‚ö†Ô∏è Funciona sem verifica√ß√£o SSL - problema pode ser com CA certificates</span><br>";
} else {
    echo "<span class='info'>‚ÑπÔ∏è Mesmo resultado - problema n√£o √© com verifica√ß√£o SSL</span><br>";
}

curl_close($ch);

echo "</div>";

echo "<div class='section'>";
echo "<h2>üìû Pr√≥ximos Passos</h2>";
echo "<ol>";
echo "<li>Se o certificado estiver expirado, solicite um novo √† Cora</li>";
echo "<li>Confirme o Client ID correto com a documenta√ß√£o da Cora</li>";
echo "<li>Verifique se est√° usando o ambiente correto (produ√ß√£o vs sandbox)</li>";
echo "<li>Entre em contato com o suporte da Cora se o problema persistir</li>";
echo "</ol>";
echo "</div>";

echo "</body></html>";
?>